CREATE TABLE ProductSales
(
  [Year]  INT
 ,[Quarter] TINYINT
 ,Sales     FLOAT
);
 
INSERT INTO ProductSales VALUES 
 (2017, 1, 55000)
,(2017, 2, 78000)
,(2017, 3, 49000)
,(2017, 4, 32000)
,(2018, 1, 41000)
,(2018, 2, 8965)
,(2018, 3, 69874)
,(2018, 4, 32562)
,(2019, 1, 87456)
,(2019, 2, 75000)
,(2019, 3, 96500)
,(2019, 4, 85236);

USE ECOMMERCE_PLATFORM;
SELECT * FROM ProductSales;

-- HOW MUCH GROWTH DID WE DO IN EVERY YEAR QoQ
SELECT P.*
	, ROUND(((P.SALES - P.NEXTSALES)/P.SALES)*100,2)
				FROM   
					(SELECT [Year], 
						   [Quarter], 
						   Sales, 
						   LEAD(Sales, 1, 0) OVER (PARTITION BY [Year] ORDER BY [Year], [Quarter] ASC) AS NEXTSALES  -- LEAD(Sales, 1, 0) -- PULLING THE NEXT VALUE UP BY 1 ROW -- (PARTITION BY [Year] -- IT IS FIRST DIVIDING INTO GROUPS ON THE BASIS OF YEAR AND THEN IT IS APPLYING THE LEAD(Sales, 1,0) OPERATION BY PULLING THE VALUES BY 1 ROW UP WITHIN THAT PARTICULAR GROUP 
					FROM ProductSales                                                                                --  ORDER BY [Year], [Quarter] ASC ARRANGING THE DATA FIRST BY YEAR, AND THEN BY QUARTER IN ASCENDING
					) P
;
 -- ANALYZE IN WHICH QUATERS DID WE DO THE MOST SALES AND THE POOREST
 -- ANALYZE WHICH YEAR DID WE DO THE MOST SALES
 -- ANALYZE YEAR OVER YEAR GROWTH/DE-GROWTH 
 -- QoQ GROWTH/DE-GROWTH (NO YEAR IN IT)

 -- ANALYZE IN WHICH QUATERS DID WE DO THE MOST SALES AND THE POOREST
 SELECT * FROM ProductSales;
 
 SELECT T.*
		, CASE WHEN T.RANK_SALES=1 THEN 'POOREST' 
				WHEN T.RANK_SALES=4 THEN 'MOST'
				ELSE 'NIL'
				END AS FLAG
				FROM (
						 SELECT *
								, RANK() OVER (PARTITION BY [YEAR] ORDER BY [YEAR], [SALES] ASC) AS RANK_SALES
								FROM ProductSales
					 ) T;

-- ANALYZE WHICH YEAR DID WE DO THE MOST SALES
SELECT [YEAR]
	, SUM(SALES) 
	FROM ProductSales 
	GROUP BY [YEAR] 
	ORDER BY SUM(SALES) DESC;

-- ANALYZE YEAR OVER YEAR GROWTH/DE-GROWTH 
SELECT B.*
	   , CASE WHEN B.PERC_DIFF < 0 THEN 'DE-GROWTH' 
		 ELSE 'GROWTH' END AS GROW_FLAG
		 FROM (
				SELECT A.*
						, LAG(A.TOT_SALES,1,0) OVER (ORDER BY [YEAR]) LAG_SALES
						, ROUND(((A.TOT_SALES - LAG(A.TOT_SALES,1,0) OVER (ORDER BY [YEAR]))/A.TOT_SALES)*100,2) AS PERC_DIFF
						FROM (
								SELECT [YEAR]
									, SUM(SALES) TOT_SALES
									FROM ProductSales 
									GROUP BY [YEAR] 
									--ORDER BY [YEAR]
							 ) A
				) B ;

 -- QoQ GROWTH/DE-GROWTH (NO YEAR IN IT)
SELECT B.*
	   , CASE WHEN B.PERC_DIFF < 0 THEN 'DE-GROWTH' 
		 ELSE 'GROWTH' END AS GROW_FLAG
		 FROM (
				SELECT A.*
						, LAG(A.Sales,1,0) OVER (ORDER BY [YEAR]) LAG_SALES
						, ROUND(((A.Sales - LAG(A.Sales,1,0) OVER (ORDER BY [YEAR]))/A.Sales)*100,2) AS PERC_DIFF
						FROM ProductSales A
				) B ;










------------------------------------------------

USE RETURNS_PRACTICE;

CREATE TABLE ORDER_RETTYPE (
ORDER_NO VARCHAR(255)
, SKU_NO VARCHAR(255)
, RETURN_TYPE VARCHAR(255)
);

INSERT INTO ORDER_RETTYPE VALUES 
('2001','P2','Dc return')
,('2011','P4','DC return')
,('2011','P1','Store return')
,('2023','P5','dc return')
,('2021','P1','store return')
,('2019','P1','DC return')
,('2013','P4','store return')
,('2071','P5','Store return')
;


-----------------------------------------------------------

SELECT * FROM TRANSACTION_V1;

SELECT * FROM CUST_360_INFO_V1;

SELECT * FROM CUSTSEGROLL_V1;

SELECT * FROM CALENDER;

SELECT * FROM ORDER_RETTYPE;

--CUSTOMER_ID , CUST_SEG
-----------------------------------------------------------

SELECT COUNT(*) FROM CUST_360_INFO_V1 WHERE CUSTOMER_SEGMENTS IS NULL;


SELECT DISTINCT T.AMPERITY_ID
		, COALESCE (CR.SEGMENT,C.CUSTOMER_SEGMENTS) AS CUSTOMER_SEG
		--, C.TIER_NAME

		FROM TRANSACTION_V1 T
		LEFT JOIN CUST_360_INFO_V1 C
		ON T.AMPERITY_ID=C.AMP_ID
		LEFT JOIN CUSTSEGROLL_V1 CR
		ON CR.AMPERITY_ID=T.AMPERITY_ID;


--DROP VIEW RETURNS_ANALYSIS_M;

--CTE - COMMON TABLE EXPRESSIONS


CREATE VIEW RETURNS_ANALYSIS_TABLE AS
WITH LOYALTY AS (
				 SELECT A.AMP_ID, A.TIER_NAME FROM (
				 SELECT *
						, ROW_NUMBER() OVER (PARTITION BY AMP_ID ORDER BY LAST_ACTIVITY_DATE DESC) AS LOYALTY_ROW_NUM 
				 FROM CUST_360_INFO_V1) A
				 WHERE A.LOYALTY_ROW_NUM = 1
				 ),

CUSTSEG AS (SELECT DISTINCT A.AMPERITY_ID
					, COALESCE (CR.SEGMENT,C.CUSTOMER_SEGMENTS) AS CUSTOMER_SEG
					FROM TRANSACTION_V1 A
					LEFT JOIN CUST_360_INFO_V1 C
					ON A.AMPERITY_ID=C.AMP_ID
					LEFT JOIN CUSTSEGROLL_V1 CR
					ON CR.AMPERITY_ID=A.AMPERITY_ID
			)

SELECT T.AMPERITY_ID
		, C.CUSTOMER_SEG
		, L.TIER_NAME
		, MONTH(T.ORDER_DATETIME) AS MONTH_NUM
		, ISNULL(SUM(ABS(CASE WHEN T.IS_RETURN='FALSE' AND T.IS_CANCELLATION='FALSE' THEN T.ITEM_REVENUE END)),0) AS GROSS_SALES
		, ISNULL(SUM(ABS(CASE WHEN T.IS_RETURN='TRUE' AND T.IS_CANCELLATION='FALSE' THEN T.ITEM_REVENUE END)),0) AS GROSS_RETURNS
		, ISNULL(SUM(ABS(CASE WHEN T.IS_RETURN='FALSE' AND T.IS_CANCELLATION='FALSE' THEN T.ITEM_QUANTITY END)),0) AS GROSS_ITEMS_ORDERED
		, ISNULL(SUM(ABS(CASE WHEN T.IS_RETURN='TRUE' AND T.IS_CANCELLATION='FALSE' THEN T.ITEM_QUANTITY END)),0) AS GROSS_ITEMS_RETURNED
		FROM TRANSACTION_V1 T
		LEFT JOIN LOYALTY L
		ON T.AMPERITY_ID=L.AMP_ID

		LEFT JOIN CUSTSEG C
		ON C.AMPERITY_ID=T.AMPERITY_ID

		--LEFT JOIN CALENDER CA
		--ON CA.DAY_NAME = T.ORDER_DATETIME

		GROUP BY T.AMPERITY_ID, CUSTOMER_SEG, TIER_NAME, MONTH(T.ORDER_DATETIME);

SELECT SUM(GROSS_SALES) TOT_SALES, SUM(GROSS_RETURNS) TOT_RET_REV FROM RETURNS_ANALYSIS_TABLE;

SELECT * FROM TRANSACTION_V1;

SELECT * FROM RETURNS_ANALYSIS_TABLE;

SELECT CUSTOMER_SEG, SUM(GROSS_RETURNS)/SUM(GROSS_SALES) AS CUSTSEG_WISE_RETRATE FROM RETURNS_ANALYSIS_TABLE GROUP BY CUSTOMER_SEG;

SELECT TIER_NAME
		, MONTH_NUM
		, SUM(GROSS_RETURNS)/NULLIF(SUM(GROSS_SALES),0) AS TIER_WISE_RETRATE 
		FROM RETURNS_ANALYSIS_TABLE 
		GROUP BY TIER_NAME, MONTH_NUM;


CREATE VIEW RETURNS_TYPE_ANALYSIS AS
WITH LOYALTY AS (
				 SELECT A.AMP_ID, A.TIER_NAME FROM (
				 SELECT *
						, ROW_NUMBER() OVER (PARTITION BY AMP_ID ORDER BY LAST_ACTIVITY_DATE DESC) AS LOYALTY_ROW_NUM 
				 FROM CUST_360_INFO_V1) A
				 WHERE A.LOYALTY_ROW_NUM = 1
				 ),

CUSTSEG AS (SELECT DISTINCT A.AMPERITY_ID
					, COALESCE (CR.SEGMENT,C.CUSTOMER_SEGMENTS) AS CUSTOMER_SEG
					FROM TRANSACTION_V1 A
					LEFT JOIN CUST_360_INFO_V1 C
					ON A.AMPERITY_ID=C.AMP_ID
					LEFT JOIN CUSTSEGROLL_V1 CR
					ON CR.AMPERITY_ID=A.AMPERITY_ID
			)

SELECT T.AMPERITY_ID
		, C.CUSTOMER_SEG
		, L.TIER_NAME
		, MONTH(T.ORDER_DATETIME) AS MONTH_NUM
		, O.RETURN_TYPE
		, ISNULL(SUM(ABS(CASE WHEN T.IS_RETURN='TRUE' AND T.IS_CANCELLATION='FALSE' THEN T.ITEM_REVENUE END)),0) AS GROSS_RETURNS
		, ISNULL(SUM(ABS(CASE WHEN T.IS_RETURN='TRUE' AND T.IS_CANCELLATION='FALSE' THEN T.ITEM_QUANTITY END)),0) AS GROSS_ITEMS_RETURNED
		FROM TRANSACTION_V1 T
		LEFT JOIN LOYALTY L
		ON T.AMPERITY_ID=L.AMP_ID

		LEFT JOIN CUSTSEG C
		ON C.AMPERITY_ID=T.AMPERITY_ID

		LEFT JOIN ORDER_RETTYPE O
		ON O.ORDER_NO=T.ORDER_ID
		AND O.SKU_NO=T.PRODUCT_ID

		WHERE T.IS_RETURN='TRUE'

		GROUP BY T.AMPERITY_ID, CUSTOMER_SEG, TIER_NAME, MONTH(T.ORDER_DATETIME), RETURN_TYPE;

SELECT * FROM RETURNS_TYPE_ANALYSIS;

SELECT LOWER(RETURN_TYPE) AS RET_TYPE, SUM(GROSS_RETURNS) FROM RETURNS_TYPE_ANALYSIS GROUP BY LOWER(RETURN_TYPE);

SELECT MONTH_NUM
		, LOWER(RETURN_TYPE) AS RET_TYPE
		, SUM(GROSS_RETURNS) 
		FROM RETURNS_TYPE_ANALYSIS 
		GROUP BY MONTH_NUM, LOWER(RETURN_TYPE);