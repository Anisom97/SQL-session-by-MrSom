SELECT * FROM TRANSACTION_PRACTICE_DUMMY;

SELECT DISTINCT DATASOURCE FROM TRANSACTION_PRACTICE_DUMMY;

-- CLASSIFY/SEGMENT THE CUSTOMERS ON THEIR PURCHASE PATTERNS 
-- FOR A COMPLETE PURCHASE TO HAPPEN CUSTOMER SHOULDN'T CANCEL OR RETURN THE PRODUCT
-- IF AVG. BUYING FREQUENCY IN BETWEEN PURCHASE DATES ARE THESE BELOW CONDITION THEN TAG AS THEN AS THESE TAGS. 
SELECT C.CUST_ID
		--, COUNT(*)+1 AS NO_OF_TRANS
		, CASE 
				WHEN AVG(C.DAY_DIFF_FROM_LASTORDER) IN (0,1) THEN 'NOT SURE'
				WHEN AVG(C.DAY_DIFF_FROM_LASTORDER) BETWEEN 2 AND 10 THEN 'FREQUENT PURCHASER'
				WHEN AVG(C.DAY_DIFF_FROM_LASTORDER) BETWEEN 11 AND 30 THEN 'REGULAR CUSTOMER'
				WHEN AVG(C.DAY_DIFF_FROM_LASTORDER) > 30 AND AVG(C.DAY_DIFF_FROM_LASTORDER) < 60 THEN 'IRREGULAR CUSTOMER'
				ELSE 'NO PATTERN'
				END AS CUSTOMER_PURCHASE_PATTERN 
		FROM (

			SELECT B.CUST_ID
					, B.ORDER_DATETIME
					, B.LAST_DATE
					, DATEDIFF(DAY, B.ORDER_DATETIME, B.LAST_DATE) AS DAY_DIFF_FROM_LASTORDER
					FROM (

							SELECT A.CUST_ID
									, A.ORDER_DATETIME
									, LAG(A.ORDER_DATETIME,1) OVER (PARTITION BY A.CUST_ID ORDER BY A.ORDER_DATETIME DESC) AS LAST_DATE
									FROM (

											SELECT AMPERITY_ID AS CUST_ID
													, ORDER_DATETIME
													FROM TRANSACTION_PRACTICE_DUMMY
													WHERE 
													IS_RETURN=0
													AND IS_CANCELLATION=0
													--ORDER BY ORDER_DATETIME DESC
										) A 

						) B 

			) C
		WHERE DAY_DIFF_FROM_LASTORDER IS NOT NULL
		GROUP BY C.CUST_ID;

------------------------------------------------------------------------------------------------------
SELECT AMPERITY_ID, DATASOURCE, ITEM_QUANTITY FROM TRANSACTION_PRACTICE_DUMMY where AMPERITY_ID='16d19f40-0163-33b9-b44a-97d2920909de';

--CUSTOMER WISE ECOM & POS QUANTITY PURCHASED
SELECT AMPERITY_ID AS CUST_ID
		, SUM (CASE WHEN DATASOURCE='CDT_ECOM_UIT' THEN ITEM_QUANTITY END) AS ECOM_PURCHASED
		, SUM (CASE WHEN DATASOURCE='CDT_POS_UIT' THEN ITEM_QUANTITY END) AS POS_PURCHASED
		FROM TRANSACTION_PRACTICE_DUMMY
		WHERE 
		IS_RETURN=0
		AND IS_CANCELLATION=0
		AND AMPERITY_ID='16d19f40-0163-33b9-b44a-97d2920909de'
		GROUP BY 
		AMPERITY_ID
;

SELECT AMPERITY_ID
		, PRODUCT_GENDER
		, SUM(ITEM_QUANTITY) AS TOTAL_QTY
		FROM TRANSACTION_PRACTICE_DUMMY
		WHERE 
		IS_RETURN=0
		AND IS_CANCELLATION=0
		AND AMPERITY_ID='16d19f40-0163-33b9-b44a-97d2920909de'
		GROUP BY 
		AMPERITY_ID
		, PRODUCT_GENDER;

SELECT * FROM TRANSACTION_PRACTICE_DUMMY;

--FIND THE NO. OF ITEMS PURCHASED UNDER PRODUCT GENDER BY EVERY CUSTOMER  
SELECT AMPERITY_ID
		, Womens
		, Girls
		, Boys
		, Unisex
		, Mens 
		FROM     
			(SELECT AMPERITY_ID
					, PRODUCT_GENDER
					, ITEM_QUANTITY 
					FROM TRANSACTION_PRACTICE_DUMMY 
					WHERE 
					IS_RETURN=0
					AND IS_CANCELLATION=0) AS A    
		PIVOT    
		(SUM(ITEM_QUANTITY) FOR PRODUCT_GENDER IN (Womens, Girls, Boys, Unisex, Mens)) AS B ;   

--FIND THE TOTAL ITEMS SOLD, TOTAL REV. GENERATED, ECOM REV. GENERATED, POS REV. GENERATED, ITEMS RETURNED, ITEMS CALNCELLED FOR EVERY BRAND 
SELECT PRODUCT_BRAND
		, SUM (CASE WHEN IS_RETURN=0 AND IS_CANCELLATION=0 THEN ITEM_QUANTITY END) AS BRAND_ITEMS_SOLD
		, ROUND (SUM (CASE WHEN IS_RETURN=0 AND IS_CANCELLATION=0 THEN ITEM_REVENUE END), 2) AS BRAND_REVENUE_GENERATED
		, ROUND (SUM (CASE WHEN DATASOURCE='CDT_ECOM_UIT' AND IS_RETURN=0 AND IS_CANCELLATION=0 THEN ITEM_REVENUE END), 2) AS BRAND_ECOM_REVENUE_GENERATED
		, ROUND (SUM (CASE WHEN DATASOURCE='CDT_POS_UIT' AND IS_RETURN=0 AND IS_CANCELLATION=0 THEN ITEM_REVENUE END), 2) AS BRAND_POS_REVENUE_GENERATED
		, ABS (SUM (CASE WHEN IS_RETURN=1 AND IS_CANCELLATION=0 THEN ITEM_QUANTITY END)) AS BRAND_ITEMS_RETURNED
		, SUM (CASE WHEN IS_RETURN=0 AND IS_CANCELLATION=1 THEN ITEM_QUANTITY END) AS BRAND_ITEMS_CANCELLED
		FROM TRANSACTION_PRACTICE_DUMMY
		GROUP BY PRODUCT_BRAND
		ORDER BY BRAND_REVENUE_GENERATED DESC;

SELECT STORE_ID
		, PRODUCT_SIZE
		, COUNT(*) NO_OF_SIZES_BOUGHT
		FROM TRANSACTION_PRACTICE_DUMMY
		WHERE STORE_ID!=789
		GROUP BY 
		STORE_ID
		, PRODUCT_SIZE
		ORDER BY 
		STORE_ID
		, PRODUCT_SIZE
;

SELECT DISTINCT YEAR(ORDER_DATETIME) FROM TRANSACTION_PRACTICE_DUMMY;


SELECT STORE_ID
		, CASE WHEN YEAR_NO=2019 THEN PRODUCT_COLOR END AS COLOR_2019
		, CASE WHEN YEAR_NO=2020 THEN PRODUCT_COLOR END AS COLOR_2020
		, CASE WHEN YEAR_NO=2021 THEN PRODUCT_COLOR END AS COLOR_2021
		, CASE WHEN YEAR_NO=2022 THEN PRODUCT_COLOR END AS COLOR_2022
		, CASE WHEN YEAR_NO=2023 THEN PRODUCT_COLOR END AS COLOR_2023
		, CASE WHEN YEAR_NO=2024 THEN PRODUCT_COLOR END AS COLOR_2024
		FROM (
				SELECT STORE_ID
						, YEAR_NO
						, PRODUCT_COLOR
						, DENSE_RANK() OVER (PARTITION BY STORE_ID, YEAR_NO ORDER BY ITEMS_BOUGHT DESC) AS COLOR_RNK
						FROM 
							(SELECT STORE_ID
									, YEAR(ORDER_DATETIME) YEAR_NO
									--, STORE_ID
									, PRODUCT_COLOR
									, COUNT(*) AS ITEMS_BOUGHT
									FROM TRANSACTION_PRACTICE_DUMMY
									WHERE STORE_ID!=789
									GROUP BY 
									--YEAR(ORDER_DATETIME)
									STORE_ID
									, YEAR(ORDER_DATETIME)
									, PRODUCT_COLOR
							) A
		) B
		WHERE COLOR_RNK=1
		--GROUP BY STORE_ID
;

-----------------------------------------

CREATE DATABASE RETURNS_PRACTICE;

USE RETURNS_PRACTICE;

CREATE TABLE TRANSACTION_V1
( CUSTOMER_ID VARCHAR(255)
, ORDER_DATETIME DATE
, ORDER_ID VARCHAR(255)
, PRODUCT_ID VARCHAR(255)
, ITEM_QUANTITY INT
, IS_RETURN VARCHAR(255)
, IS_CANCELLATION VARCHAR(255)
, ITEM_REVENUE FLOAT
);

INSERT INTO TRANSACTION_V1 VALUES
('1001','2022-01-13','2001','P1',1,'FALSE','FALSE',40.50)
,('1001','2022-01-21','2001','P2',-1,'TRUE','FALSE',14.50)

,('1002','2022-02-21','2002','P5',1,'FALSE','FALSE',20.60)

,('1003','2022-02-11','2011','P3',1,'FALSE','FALSE',50.20)
,('1003','2022-02-11','2011','P4',-1,'TRUE','FALSE',17.50)
,('1003','2022-01-11','2011','P1',-1,'TRUE','FALSE',29.30)

,('1001','2022-03-13','2009','P4',1,'FALSE','FALSE',30.50)

,('1004','2022-02-13','2023','P5',-1,'TRUE','FALSE',10.70)

,('1005','2022-03-10','2021','P1',-1,'TRUE','FALSE',26.50)

,('1006','2022-02-16','2045','P6',1,'FALSE','FALSE',55.50)
,('1006','2022-02-16','2045','P1',1,'FALSE','FALSE',49.50)

,('1007','2022-01-10','2020','P9',1,'FALSE','FALSE',90.50)

,('1008','2022-01-15','2019','P1',-1,'TRUE','FALSE',16.80)
,('1008','2022-01-16','2030','P1',1,'FALSE','FALSE',80.50)

,('1009','2022-03-13','2015','P3',1,'FALSE','FALSE',40.50)

,('1010','2022-03-13','2012','P8',1,'FALSE','FALSE',40.50)

,('1011','2022-03-13','2013','P4',-1,'TRUE','FALSE',32.30)

,('1012','2022-02-13','2099','P1',1,'FALSE','FALSE',40.50)

,('1013','2022-01-13','2081','P3',1,'FALSE','FALSE',40.50)

,('1014','2022-01-13','2071','P5',-1,'TRUE','FALSE',18.90)
;

SELECT * FROM TRANSACTION_V1;

CREATE TABLE CUST_360_INFO_V1
( CUST_ID VARCHAR(255)
, CUSTOMER_SEGMENTS VARCHAR(255)
, TIER_NAME VARCHAR(255)
, LAST_ACTIVITY_DATE DATE
);

INSERT INTO CUST_360_INFO_V1 VALUES
('1001','CLASSIC','ICON','2022-01-10')
,('1002','TREND DEE','DEVOTEE','2022-01-23')
,('1001','CLASSIC','OFFICIAL','2022-01-24')
,('1003','FASHION','OFFICIAL','2022-01-27')
,('1004','TREND DEE','DEVOTEE','2022-03-19')
,('1005','TREND DEE','OFFICIAL','2022-02-14')
,('1002','TREND DEE','ICON','2022-02-23')
,('1006',NULL,'ICON','2022-02-24')
,('1007',NULL,'DEVOTEE','2022-02-25')
,('1008','CLASSIC','ICON','2022-03-12')
,('1009',NULL,NULL,'2022-01-09')
,('1010',NULL,NULL,'2022-03-14')
,('1011',NULL,'DEVOTEE','2022-02-15')
,('1012','FASHION','OFFICIAL','2022-01-19')
,('1013','CLASSIC',NULL,'2022-03-23')
,('1014','TREND DEE','ICON','2022-03-23')
;


SELECT * FROM CUST_360_INFO_V1;

CREATE TABLE CUSTSEGROLL_V1 
( CUSTOMER_ID VARCHAR(255)
, SEGMENT VARCHAR(255)
);

INSERT INTO CUSTSEGROLL_V1 VALUES
('1001','CLASSIC')
,('1005','TREND DEE')
,('1006','FASHION')
,('1007','FASHION')
,('1009',NULL)
,('1010','CLASSIC')
,('1011','TREND DEE')
;

SELECT * FROM CUSTSEGROLL_V1;

CREATE TABLE CALENDER
( DAY_NAME DATE,
 MONTH_NUMBER INT);

INSERT INTO CALENDER VALUES
('2022-01-10',1)
,('2022-01-23',1)
,('2022-01-24',1)
,('2022-01-27',1)
,('2022-03-19',3)
,('2022-02-14',2)
,('2022-02-23',2)
,('2022-02-24',2)
,('2022-02-25',2)
,('2022-03-12',3)
,('2022-01-09',1)
,('2022-03-14',3)
,('2022-02-15',2)
,('2022-01-19',1)
,('2022-03-23',3)
;

 SELECT * FROM CALENDER;
 
 CREATE TABLE ORDER_RETTYPE (
  ORDER_NO VARCHAR(255)
, SKU_NO VARCHAR(255)
, RETURN_TYPE VARCHAR(255)
);

INSERT INTO ORDER_RETTYPE VALUES 
('2001','P2','Dc return')
,('2011','P4','DC return')
,('2011','P1','Store return')
,('2023','P5','dc return')
,('2021','P1','store return')
,('2019','P1','DC return')
,('2013','P4','store return')
,('2071','P5','Store return')
;

-- PERFORM ANALYSIS TO SEE FROM WHERE DO WE GET THE MOST RETURNS?

-- STEP 1: FIRST CREATE A TABLE THAT HAS CUSTOMER WISE INFORMATION  (HERE WE HAVE TAKEN CUSTOMER, MONTH WISE TRASANCTION INFORMATION)
-- STEP 2: PRE PROCESS THE REQUIRED INFOS FROM EACH OF THESE TABLES AND BRING DATA AT A CUSTOMER LEVEL
-- STEP 3: IN THE FINAL QUERY JOIN ALL THE INFORMNATIONS AND CREATE A FINAL DATASET THAT HAS ALL THE POSSIBLE REASONS/INFORMATIONS ON WHICH AN RCA CAN BE DONE
GO
CREATE VIEW RETURNS_ANALYSIS_TABLE AS   --CREATING A VIEW FOR THIS EVERY DATASET CREATED BY JOINING MULTIPLE TABLE AND DOING MULTIPLE OPERATIONS

WITH LOYALTY AS (   -- THIS CTE IS PULLING OUT THE LATEST LOYALTY TIER VALUES OF EVERY CUSTOMER
				 SELECT A.CUST_ID, A.TIER_NAME FROM (    -- SO THE INNER TABLE IS FIRST CREATING THE ROW NUMBER COLUMN ACCORDING TO WHICH WE WANT TO FILTER
													 SELECT *      -- FOR EVERY CUSTOMER IT IS GROUPING THE RECORDS OF THE CUSTOMER AND ORDERING BY DESC W.R.T THE LAST_ACTIVITY_DATE 
															, ROW_NUMBER() OVER (PARTITION BY CUST_ID ORDER BY LAST_ACTIVITY_DATE DESC) AS LOYALTY_ROW_NUM 
													 FROM CUST_360_INFO_V1
												    ) A
				 WHERE A.LOYALTY_ROW_NUM = 1  -- FILTERING OUT WHERE ROW NUMBER IS 1 AS IT INDICATES THE LAST ACTIVITY
				 ),

CUSTSEG AS (SELECT DISTINCT A.CUSTOMER_ID      -- THIS CTE IS INCREASING THE COVERAGE OF THE CUSTOMER SEGMENTS I.E. FILLING IN THE NULL VALUES
					, COALESCE (CR.SEGMENT,C.CUSTOMER_SEGMENTS) AS CUSTOMER_SEG  --COALESCE WHICH IS FILLING IN THE NULL VALUES BY PULLING VALUES FROM OTHER TABLES AND COLUMNS AS MENTIONED
					FROM TRANSACTION_V1 A   -- WE WANT ALL CUSTOMERS FORM THE TRANSACTION TABLE I.E. WHY WE ARE TAKING IT AS THE BASE TABLE I.E. THE LEFT MOST TABLE
					LEFT JOIN CUST_360_INFO_V1 C  -- JOIN ON THIS TABLE TO GET IN THE CUSTOMER SEG INFO
					ON A.CUSTOMER_ID=C.CUST_ID
					LEFT JOIN CUSTSEGROLL_V1 CR  -- JOIN ON THIS TABLE TO GET IN THE CUSTOMER INFO, BY DOING A COALESCE WHICH IS FILLING IN THE NULL VALUES
					ON CR.CUSTOMER_ID=A.CUSTOMER_ID
			)

SELECT T.CUSTOMER_ID
		, C.CUSTOMER_SEG  -- THIS CUSTOMER_SEG NOW HAS MORE COVERAGE SINCE WE HAVE DONE A COALESCE WITH MULTIPLE TABLES IN THE ABOVE CTE CUTSEG
		, L.TIER_NAME
		, MONTH(T.ORDER_DATETIME) AS MONTH_NUM  -- EXTRACTING OUT MONTH FROM THE ORDER DATE TIME

		-- THIS CASE WHEN STATEMENT SUMS UP ALL THE VALUES I.E. ITEM PRICE FOR EVERY CUSTOMER-MONTH_NUM CONBINATION WHEREVER IS_RETURN='FALSE' AND IS_CANCELLATION='FALSE' -- THUS IT RETURNS GROSS SALES FOR ALL CUSTOMERS-MONTH_NUM (EVERY CUSTOMER, IN EVERY MONTH)
		, ISNULL(SUM(ABS(CASE WHEN T.IS_RETURN='FALSE' AND T.IS_CANCELLATION='FALSE' THEN T.ITEM_REVENUE END)),0) AS GROSS_SALES  
		, ISNULL(SUM(ABS(CASE WHEN T.IS_RETURN='TRUE' AND T.IS_CANCELLATION='FALSE' THEN T.ITEM_REVENUE END)),0) AS GROSS_RETURNS  -- SIMILARLY LIKE THE PREIOUS ONE BUT ONLY TAKES INTO ACCOUNT THE RETURN ORDERS

		-- THIS CASE WHEN STATEMENT SUMS UP ALL THE VALUES I.E. QUANTITIES FOR EVERY CUSTOMER-MONTH_NUM CONBINATION WHEREVER IS_RETURN='FALSE' AND IS_CANCELLATION='FALSE'  -- RETURNS GROSS ITEMS ORDERED BY EVERY CUSTOMER, IN EVERY MONTH
		, ISNULL(SUM(ABS(CASE WHEN T.IS_RETURN='FALSE' AND T.IS_CANCELLATION='FALSE' THEN T.ITEM_QUANTITY END)),0) AS GROSS_ITEMS_ORDERED
		, ISNULL(SUM(ABS(CASE WHEN T.IS_RETURN='TRUE' AND T.IS_CANCELLATION='FALSE' THEN T.ITEM_QUANTITY END)),0) AS GROSS_ITEMS_RETURNED

		FROM TRANSACTION_V1 T   --TAKING TRANSACTION AS THE BASE TABLE SINCE WE WANT ALL CUSTOMER TRANSACTION INFO
		LEFT JOIN LOYALTY L    -- JOIN ON LOYALTY CTE I.E. TEMP TABLE TO PULL IN THE LATEST ACTIVITY LOYALTY INFO.
		ON T.CUSTOMER_ID=L.CUST_ID

		LEFT JOIN CUSTSEG C  -- JOIN ON CUSTSEG CTE I.E. TEMP TABLE TO PULL IN THE CUSTOMER SEGMENTS
		ON C.CUSTOMER_ID=T.CUSTOMER_ID

		--LEFT JOIN CALENDER CA
		--ON CA.DAY_NAME = T.ORDER_DATETIME

		GROUP BY T.CUSTOMER_ID, CUSTOMER_SEG, TIER_NAME, MONTH(T.ORDER_DATETIME)  -- GROUP BY ALL THE COLUMNS PRESENT BEFORE THE AGGREGATIONS I.E. GROUPING IT BY EVERY CUSTOMER'S MONTH WISE TRABSACTION INFO
		;
GO		
		
-- analysis		
SELECT * FROM TRANSACTION_V1;

SELECT * FROM RETURNS_ANALYSIS_TABLE;  -- PRINTING THE VIEW I.E. THE RUNNING THE ENTIRE CODE CHUNK PRESENT IN IT AND CREATING THE TABLE AS AN OUTPUT

SELECT SUM(GROSS_SALES) TOT_SALES, SUM(GROSS_RETURNS) TOT_RET_REV FROM RETURNS_ANALYSIS_TABLE;  -- SUM(GROSS_SALES) SUMMING UP ALL SALES VALUES WILL GIVE ME TOTAL SALES --SUM(GROSS_RETURNS) SUMMING UP ALL RETURN SALES VALUES WILL GIVE ME TOTAL RETURN SALES

-- CALC. CUSTOMER SEGMENT WISE RETURN RATE
SELECT CUSTOMER_SEG, SUM(GROSS_RETURNS)/SUM(GROSS_SALES) AS CUSTSEG_WISE_RETRATE FROM RETURNS_ANALYSIS_TABLE GROUP BY CUSTOMER_SEG; 



---------------------------------------------------------------------------------

USE ECOMMERCE;
SELECT TOP 100 * FROM TRANSACTION_PRACTICE_DUMMY;

WITH PURCHASE_FREQ AS (
						SELECT C.CUST_ID
							, AVG(C.DAY_DIFF_FROM_LASTORDER) AS PURCHASE_FREQ
							, CASE 
									WHEN AVG(C.DAY_DIFF_FROM_LASTORDER) IN (0,1) THEN 'NOT SURE'
									WHEN AVG(C.DAY_DIFF_FROM_LASTORDER) BETWEEN 2 AND 10 THEN 'FREQUENT PURCHASER'
									WHEN AVG(C.DAY_DIFF_FROM_LASTORDER) BETWEEN 11 AND 30 THEN 'REGULAR CUSTOMER'
									WHEN AVG(C.DAY_DIFF_FROM_LASTORDER) > 30 AND AVG(C.DAY_DIFF_FROM_LASTORDER) < 60 THEN 'IRREGULAR CUSTOMER'
									ELSE 'NO PATTERN'
									END AS CUSTOMER_PURCHASE_PATTERN 
							FROM (

								SELECT B.CUST_ID
										, B.ORDER_DATETIME
										, B.LAST_DATE
										, DATEDIFF(DAY, B.ORDER_DATETIME, B.LAST_DATE) AS DAY_DIFF_FROM_LASTORDER
										FROM (

												SELECT A.CUST_ID
														, A.ORDER_DATETIME
														, LAG(A.ORDER_DATETIME,1) OVER (PARTITION BY A.CUST_ID ORDER BY A.ORDER_DATETIME DESC) AS LAST_DATE
														FROM (

																SELECT AMPERITY_ID AS CUST_ID
																		, ORDER_DATETIME
																		FROM TRANSACTION_PRACTICE_DUMMY
																		WHERE 
																		IS_RETURN=0
																		AND IS_CANCELLATION=0
																		--ORDER BY ORDER_DATETIME DESC
															) A 

											) B 

										) C
							WHERE DAY_DIFF_FROM_LASTORDER IS NOT NULL
							GROUP BY C.CUST_ID
), 

CNT_TRANS AS (
				SELECT A.CUST_ID
						, (A.TOTAL_STORE_PURCHASE + A.TOTAL_ONLINE_PURCAHSE) AS TOTAL_PURCHASES
						FROM (
								SELECT AMPERITY_ID AS CUST_ID
										, COUNT(FK_STORE_TXN) TOTAL_STORE_PURCHASE
										, COUNT(FK_WEB_TXN) TOTAL_ONLINE_PURCAHSE
										FROM TRANSACTION_PRACTICE_DUMMY 
										WHERE 
										IS_RETURN=0
										AND IS_CANCELLATION=0 
										GROUP BY AMPERITY_ID
						     ) A
), 
-- SELECT AMPERITY_ID, FK_STORE_TXN, FK_WEB_TXN 
-- FROM TRANSACTION_PRACTICE_DUMMY
-- WHERE AMPERITY_ID='e5f64006-15ce-3ed9-8bb3-caa9f059235e';
RECENCY AS (

	--SELECT MIN(LAST_PURCHASED), MAX(LAST_PURCHASED) FROM (
			 SELECT CUST_ID 
			 		, ABS (DATEDIFF (DAY, GETDATE(), ORDER_DATETIME)) AS LAST_PURCHASED
			 FROM (
					SELECT AMPERITY_ID CUST_ID
							, ORDER_DATETIME 
							, ROW_NUMBER() OVER (PARTITION BY AMPERITY_ID ORDER BY ORDER_DATETIME DESC) LATEST_PURCHASE_DATE
							FROM TRANSACTION_PRACTICE_DUMMY
			 ) B
			 WHERE LATEST_PURCHASE_DATE = 1
	--) C
), 

MONETORY AS ( 
				SELECT AMPERITY_ID AS CUST_ID
						, ROUND(SUM(ITEM_COST), 2) AS REVENUE_GENERATED
						FROM TRANSACTION_PRACTICE_DUMMY
						WHERE 
						IS_RETURN=0
						AND IS_CANCELLATION=0 
						GROUP BY AMPERITY_ID
)

SELECT C.CUST_ID
		, C.TOTAL_PURCHASES
		, F.PURCHASE_FREQ
		, F.CUSTOMER_PURCHASE_PATTERN
		, R.LAST_PURCHASED
		, M.REVENUE_GENERATED

		FROM CNT_TRANS C
		LEFT JOIN PURCHASE_FREQ F
		ON C.CUST_ID=F.CUST_ID

		LEFT JOIN RECENCY R
		ON C.CUST_ID=R.CUST_ID

		LEFT JOIN MONETORY M 
		ON C.CUST_ID=M.CUST_ID
;